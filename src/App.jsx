import React, { useReducer, useState } from 'react';
import './App.css';

// Reducer function manage a list of todo items based on different actions (add, delete)
//it takes two parameters: state (represents the current state of todos. 
//It's an array of todo objects, where each todo object has properties - id, text, complete.
// action (this parameter represents the action that is dispatched to the reducer). 

const todoReducer = (state, action) => {
  switch (action.type) {
    //This case adds a new todo to the state. It creates a new todo object with a unique id generated by Date.now(), 
    //the text provided in action.payload, and sets complete to false. 
    //It then returns a new array with this new todo object added at the beginning (...state spreads the existing todos).
    case 'ADD_TODO':
      return [
        { id: Date.now(), text: action.payload, complete: false },
        ...state
      ];
    //This case removes a todo from the state based on its id. 
    //It uses Array.prototype.filter to return a new array containing only those todos
    // whose id does not match action.payload (the id of the todo to be deleted).
    case 'DELETE_TODO':
      return state.filter(todo => todo.id !== action.payload);

    //Adding a case to handle toggling the complete state:
    case 'TOGGLE_TODO':
      return state.map(todo =>
        todo.id === action.payload ? { ...todo, complete: !todo.complete } : todo
      );

    default:
      return state;
  }
};

// Initial state
//The initialState is an empty array, which will hold the list of todos.
const initialState = [];

//Component Setup:

//useReducer is used to manage complex state logic for the todos array. 
//It takes todoReducer as the reducer function and initialState as the initial state.

//useState is used to manage the state of newTodo, 
//which represents the input field where users can enter new todos.

const App = () => {
  const [todos, dispatch] = useReducer(todoReducer, initialState);
  const [newTodo, setNewTodo] = useState('');

  //Handlers:

  //handleAddTodo function is called when the user clicks the "Add Todo" button. 
  //It dispatches an action ({ type: 'ADD_TODO', payload: newTodo }) to the todoReducer to add a new todo to the todos array. 
  //It then clears the newTodo state to prepare for the next input.
  const handleAddTodo = () => {
    if (newTodo.trim() !== '') {
      dispatch({ type: 'ADD_TODO', payload: newTodo });
      setNewTodo('');
    }
  };

  //handleDeleteTodo function is called when the user clicks the "Delete" button next to a todo item. 
  //It dispatches an action ({ type: 'DELETE_TODO', payload: id }) to the todoReducer 
  //to delete the todo with the corresponding id.
  const handleDeleteTodo = id => {
    dispatch({ type: 'DELETE_TODO', payload: id });
  };

  //Function handleToggleTodo triggers an action ('TOGGLE_TODO') 
  //to toggle the completion state of a todo item identified by its id.
  const handleToggleTodo = id => {
    dispatch({ type: 'TOGGLE_TODO', payload: id });
  };


  //Render Method:

  //The component renders a container (div.todo-container) with a title (h1) and an input field (input.todo-input) for adding new todos.

  //The "Add" button triggers handleAddTodo when clicked.

  // The list of todos (ul.todo-list) is rendered using todos.map to create list items (li.todo-item). 
  // Each todo item displays its text (span.todo-text)  and a delete button

  // Delete button triggers handleDeleteTodo with the todo's id when clicked.

  return (
    <div className="todo-container">
      <h1>Create Todo List</h1>
      <input
        className="todo-input"
        type="text"
        value={newTodo}
        onChange={e => setNewTodo(e.target.value)}
        placeholder="Add task"
      />
      <button className="todo-button" onClick={handleAddTodo}>
        Add
      </button>
      <ul className="todo-list">
        {todos.map(todo => (
          <li key={todo.id} className="todo-item">
            <input
              type="checkbox"
              checked={todo.complete}
              onChange={() => handleToggleTodo(todo.id)}
            />
            <span className={`todo-text ${todo.complete ? 'completed' : ''}`}>
            {todo.text}
            </span>
            <button className="todo-delete" onClick={() => handleDeleteTodo(todo.id)}>
              Delete
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;